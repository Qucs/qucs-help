# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014, Qucs Team (2014)
# This file is distributed under the same license as the Qucs Help package.
#
# Translators:
# seijirom <seijiro.moriyama@gmail.com>, 2016
msgid ""
msgstr ""
"Project-Id-Version: Qucs Help\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-01-30 00:03+0100\n"
"PO-Revision-Date: 2016-03-19 01:34+0000\n"
"Last-Translator: seijirom <seijiro.moriyama@gmail.com>\n"
"Language-Team: Japanese (http://www.transifex.com/qucs/qucs-"
"help/language/ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.3.4\n"

#: ../../source/start_digi.rst:3
msgid "Getting Started with Digital Simulations"
msgstr "デジタル シミュレーション入門"

#: ../../source/start_digi.rst:6
msgid ""
"Qucs is also a graphical user interface for performing digital "
"simulations. This document should give you a short description on how to "
"use it."
msgstr "Qucsは、デジタルシミュレーションを実行するグラフィカルユーザインタフェースでもあります。この文書では、それをどのように使うことができるかを少し説明します。"

#: ../../source/start_digi.rst:10
#, fuzzy
msgid ""
"For digital simulations Qucs uses the FreeHDL program "
"(`http://www.freehdl.seul.org <http://www.freehdl.seul.org>`_). So the "
"FreeHDL package as well as the GNU C++ compiler must be installed on the "
"computer."
msgstr ""
"デジタルシミュレーションのためにQucsは、FreeHDL program "
"(http://www.freehdl.seul.org)を使います。そのため、FreeHDLパッケージと、GNU C++ "
"コンパイラがコンピュータにインストールされていなくてはなりません。"

#: ../../source/start_digi.rst:15
#, fuzzy
msgid ""
"There is no big difference in running an analog or a digital simulation. "
"So having read the `Getting Started for analog simulations "
"<start.html>`_, it is now easy to get a digital simulation work. Let us "
"compute the truth table of a simple logical AND cell. Select the digital "
"components in the combobox of the components tab on the left-hand side "
"and build the circuit shown in figure 1. The digital simulation block can"
" be found among the other simulation blocks."
msgstr ""
"アナログかデジタルかシミュレーションを走らせる上では大きな違いはありません。 `アナログシミュレーション入門<start.html>`__ "
"を読んでいれば、デジタルシミュレーションを動かすのは簡単です。簡単なロジックのANDセルの真理値表を計算してみましょう。左側にあるcomponentsタブの複合ボックスからdigital"
" componentsを選び、図1に示す回路を組み立てましょう。digital "
"simulationブロックは、そのほかのシミュレーションブロックの中から、見つけてください。"

#: ../../source/start_digi.rst:23
msgid ""
"The digital sources *S1* and *S2* are the inputs, the node labeled as "
"*Output* is the output. After performing the simulation, the data display"
" page opens. Place the diagram *truth table* on it and insert the "
"variable *Output*. Now the truth table of a two-port AND cell is shown. "
"Congratulation, the first digital simulation is done!"
msgstr ""
"デジタルソース *S1* と *S2* は入力で、 *Output* "
"というラベルのついたノードが出力です。シミュレーション実行後、データディスプレイのページが開きます。t *truth table* "
"という図表をその上に配置して、 *Output* "
"という変数を挿入しましょう。そうすると、２ポートANDセルの真理値表が表示されます。おめでとうございます、最初のデジタルシミュレーションは終了です。"

#: ../../source/start_digi.rst:30
msgid "|image1_EN|"
msgstr "|image1_EN|"

#: ../../source/start_digi.rst:32
msgid "Figure 1 - Qucs main window"
msgstr "図1 - Qucsのメインウィンドウ"

#: ../../source/start_digi.rst:37
msgid ""
"A truth table is not the only digital simulation that Qucs can perform. "
"It is also possible to apply an arbitrary signal to a circuit and see the"
" output signal in a timing diagram. To do so, the parameter *Type* of the"
" simulation block must be changed to *TimeList* and the duration of the "
"simulation must be entered in the next parameter. The digital sources "
"have now a different meaning: They can output an arbitrary bit sequence "
"by defining the first bit (low or high) and a list that sets the times "
"until the next change of state. Note that this list repeats itself after "
"its end. So, to create a 1GHz clock with pulse ratio 1:1, the list "
"writes: 0.5ns; 0.5ns"
msgstr ""
"Qucsで出来るデジタルシミュレーションは、真理値表だけではありません。回路に任意の信号を印加し、タイミング図に出力信号を観測することもできます。それを行うには、シミュレーションブロックの"
" *Type* というパラメータは、 *TimeList* "
"に変更されなくてはなりませんし、次のパラメータとしてシミュレーションの期間が入力されなくてはなりません。デジタルソースは、ここでは別の意味を持ちます：それらは、最初のビット（ローかハイか）と状態が変化する時刻のリストを定義することで、任意のビット系列を出力できます。このリストは、終了後も繰り返すことに注意してください。そのため、パルス比が1:1の1GHzのクロックを作るには、リストは、0.5ns;0.5nsとなります。"

#: ../../source/start_digi.rst:48
msgid ""
"To display the result of this simulation type, there is the diagram "
"*timing diagram*. Here, the result of all output nodes can be shown row "
"by row in one diagram. So, let's have fun..."
msgstr ""
"この種のシミュレーション結果を表示するために、 *timing diagram* "
"という図表が用意されています。ここで、すべての出力ノードは、１つの図表の行ごとに表示されます。では、どうぞ楽しんでください。"

#: ../../source/start_digi.rst:55
msgid "VHDL File Component"
msgstr "VHDL File Component"

#: ../../source/start_digi.rst:58
msgid ""
"More complex and more universal simulations can be performed using the "
"component \"VHDL file\". This component can be picked up from the "
"component list view (section \"digital components\"). Nevertheless the "
"recommended usage is the following: The VHDL file should be a member of "
"the project. Then go to the content list view and click on the file name."
" After entering the schematic area, the VHDL component can be placed."
msgstr ""
"より複雑で、より普遍的なシミュレーションは、\"VHDL "
"file\"という部品を使って実行できます。この部品は、部品のリストビュー（\"digital "
"components\"のセクション）から選択できます。そうはいったものの、お薦めの使い方は以下の通りです：そのVHDLファイルは、プロジェクトのメンバーである必要があります。そのうえで、コンテンツリストビューに移動し、ファイル名をクリックしてください。回路図の領域に入った後、VHDL部品を配置することができます。"

#: ../../source/start_digi.rst:66
msgid ""
"The last entity block in the VHDL file defines the interface, that is, "
"all input and output ports must be declared here. These ports are also "
"shown by the schematic symbol and can be connected to the rest of the "
"circuit. During simulation the source code of the VHDL file is placed "
"into the top-level VHDL file. This must be considered as it causes some "
"limitations. For example, the entity names within the VHDL file must "
"differ from names already given to subcircuits. (After a simulation, the "
"complete source code can be seen by pressing F6. Use it to get a feeling "
"for this procedure.)"
msgstr ""
"VHDLファイルの最後の実体ブロックは、インターフェイスを定義します。すなわち、すべての入力および出力ポートはここで宣言されなければなりません。これらのポートはまた、回路図シンボルで示されており、回路の残りの部分に接続することができます。シミュレーションの最中にVHDLファイルのソースコードは、トップレベルのVHDLファイル内に配置されます。これにはいくつかの制限が"
" "
"伴うので、考慮に入れなければなりません。例えば、VHDLファイル内のエンティティ名は、すでにサブサーキットに与えられた名前と異なる必要があります。"
" （シミュレーションの後、完全なソースコードは、F6キーを押すことで見ることができます。この手順の感覚を身につけるために、やってみてください。）"

#: ../../source/start_digi.rst:78
msgid "`back to the top <#top>`__"
msgstr ""

